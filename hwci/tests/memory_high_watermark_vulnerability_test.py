# Licensed under the Apache License, Version 2.0 OR the MIT License.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import logging
import time
from utils.test_helpers import OneshotTest


class VulnerabilityIPC4371Test(OneshotTest):
    def __init__(self):
        super().__init__(
            apps=[
                "tests/memory_high_watermark_vulnerability/server",
                "tests/memory_high_watermark_vulnerability/client",
            ]
        )

    def oneshot_test(self, board):
        gpio = board.gpio
        serial = board.serial

        # Map the LEDs & buttons
        led_pins = {
            "LED1": gpio.pin("P0.13"),  # LED for vulnerability indication
        }
        button_pins = {
            "BUTTON1": gpio.pin("P0.11"),  # Button 0: Examine buffer
            "BUTTON2": gpio.pin("P0.12"),  # Button 1: Crash client
        }

        # Configure LED pins as inputs to read their state
        for led in led_pins.values():
            led.set_mode("input")

        # Configure Button pins as outputs
        for button in button_pins.values():
            button.set_mode("output")
            button.write(0)  # Ensure buttons are not pressed at start

        logging.info("Starting Vulnerability IPC #4371 Test")

        # Wait for server to start with longer timeout
        logging.info("Waiting for server to start...")
        assert (
            serial.expect("Vulnerability Demo Server starting", timeout=10.0)
            is not None
        )
        assert serial.expect("Server: Waiting for clients", timeout=10.0) is not None

        logging.info("Server started successfully")

        # Wait for client to start with longer timeout
        logging.info("Waiting for client to start...")
        assert (
            serial.expect("Vulnerability Demo Client starting", timeout=10.0)
            is not None
        )

        # Wait for client to connect to server
        logging.info("Waiting for client to connect to server...")
        assert (
            serial.expect("Client: Found server at service", timeout=15.0) is not None
        )
        assert serial.expect("Client: Setup complete", timeout=15.0) is not None

        # Ensure the server registered the client's buffer
        logging.info("Waiting for server to register client buffer...")
        assert serial.expect("Server: Registering client", timeout=15.0) is not None

        logging.info("Initial setup complete, both apps running and connected")
        time.sleep(2)

        logging.info("Step 1: Examining buffer before crash")
        # Press button 0 to examine the buffer before crash
        button_pins["BUTTON1"].write(1)
        time.sleep(0.5)
        button_pins["BUTTON1"].write(0)

        # Wait for server to examine the buffer
        logging.info("Waiting for server to examine buffer...")
        assert serial.expect("Server: Examining buffer", timeout=10.0) is not None
        time.sleep(2)

        logging.info("Step 2: Triggering client crash")
        # Press button 1 to crash the client
        button_pins["BUTTON2"].write(1)
        time.sleep(0.5)
        button_pins["BUTTON2"].write(0)

        # Wait for client crash message
        logging.info("Waiting for client crash...")
        assert (
            serial.expect("Client: Triggering deliberate crash", timeout=10.0)
            is not None
        )

        # Wait for client to restart
        logging.info("Waiting for client to restart...")
        assert (
            serial.expect("Vulnerability Demo Client starting", timeout=15.0)
            is not None
        )
        assert (
            serial.expect("Client: Process has been restarted", timeout=15.0)
            is not None
        )

        # Wait for client to allocate grants
        logging.info("Waiting for client to allocate grants...")
        assert serial.expect("Client: Allocating many grants", timeout=10.0) is not None
        assert (
            serial.expect("Client: Finished allocating grants", timeout=15.0)
            is not None
        )

        # Wait for client to request buffer examination
        logging.info("Waiting for client to request buffer examination...")
        assert (
            serial.expect(
                "Client: Requesting server to examine buffer after restart",
                timeout=10.0,
            )
            is not None
        )

        # Wait for server to examine buffer after restart
        logging.info("Waiting for server to examine buffer after restart...")
        assert (
            serial.expect("Server: Examining buffer \\(post-restart\\)", timeout=15.0)
            is not None
        )

        # Check for vulnerability detection
        logging.info("Checking for vulnerability detection...")
        vuln_detected = (
            serial.expect("!!! VULNERABILITY DETECTED !!!", timeout=5.0) is not None
        )

        if vuln_detected:
            logging.info("SUCCESS: Vulnerability detected!")
            assert True, "Vulnerability successfully demonstrated"
        else:
            logging.info("No vulnerability detected")
            # Check LED state
            led_state = led_pins["LED1"].read()
            if led_state == 0:  # LED is on (active low)
                logging.info("LED indicates vulnerability detected")
                assert True, "Vulnerability detected (LED indicator)"
            else:
                logging.info("LED indicates no vulnerability")
                # Not detecting the vulnerability could mean it's been fixed
                assert (
                    False
                ), "Vulnerability not detected - kernel may already have fix in place"


test = VulnerabilityIPC4371Test()
